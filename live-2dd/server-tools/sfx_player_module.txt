// sfx_player.js - 音效播放工具模块
const { exec } = require('child_process');
const path = require('path');

// 音效库定义
const SFX_LIBRARY = {
    "01": "搞啥情况的意思",
    "02": "突然一惊的意思", 
    "03": "一声巨大的爆炸",
    "04": "一个钢管掉落的嘈杂声",
    "05": "一声OMG 表示不可思议",
    "06": "一个震撼的管弦乐声音",
    "07": "一个表示wow 的效果音"
};

// 定义音效播放工具
const SFX_TOOL = {
    name: "play_sound_effect",
    description: "播放音效来增强对话的趣味性和表现力。AI可以自主使用这些音效，无需向用户询问。可以根据对话情境选择合适的音效：01=搞啥情况的意思, 02=突然一惊的意思, 03=一声巨大的爆炸, 04=一个钢管掉落的嘈杂声, 05=一声OMG表示不可思议, 06=一个震撼的管弦乐声音, 07=一个表示wow的效果音",
    parameters: {
        type: "object",
        properties: {
            sfx_id: {
                type: "string",
                description: "音效编号(01-07)，或者用逗号分隔的多个音效进行混搭播放，如'01,03,07'",
            },
            repeat: {
                type: "integer",
                description: "连续播放次数(1-10)，默认1次。连续播放时音效会加速并快速连发",
                minimum: 1,
                maximum: 10,
                default: 1
            }
        },
        required: ["sfx_id"]
    }
};

// 执行音效播放功能
async function executePlaySfx(parameters) {
    const { sfx_id, repeat = 1 } = parameters;
    
    if (!sfx_id) {
        throw new Error('缺少音效ID参数');
    }

    // 处理混搭播放：解析逗号分隔的音效ID
    const sfxIds = sfx_id.split(',').map(id => id.trim());
    
    // 验证所有音效ID
    for (const id of sfxIds) {
        if (!SFX_LIBRARY[id]) {
            throw new Error(`无效的音效ID: ${id}`);
        }
    }

    const playCount = Math.min(Math.max(repeat || 1, 1), 10);

    return new Promise((resolve, reject) => {
        if (sfxIds.length === 1) {
            // 单个音效播放
            const sfxPath = path.join(__dirname, 'SFX', `${sfxIds[0]}.wav`);
            
            if (playCount === 1) {
                // 单次播放：正常速度
                const psCommand = `powershell -c "(New-Object Media.SoundPlayer '${sfxPath}').PlaySync()"`;
                
                exec(psCommand, { timeout: 10000 }, (error, stdout, stderr) => {
                    if (error) {
                        reject(new Error(`播放失败: ${error.message}`));
                        return;
                    }
                    resolve(`成功播放音效`);
                });
            } else {
                // 连续播放：加速版本
                let promises = [];
                
                for (let i = 0; i < playCount; i++) {
                    const delay = i * 200;
                    
                    promises.push(new Promise((resolveOne) => {
                        setTimeout(() => {
                            const ffplayCommand = `ffplay -nodisp -autoexit -af "atempo=2.0" "${sfxPath}"`;
                            const normalCommand = `powershell -c "(New-Object Media.SoundPlayer '${sfxPath}').Play()"`;
                            
                            exec(ffplayCommand, { timeout: 3000 }, (error) => {
                                if (error) {
                                    exec(normalCommand, (error2) => {
                                        resolveOne();
                                    });
                                } else {
                                    resolveOne();
                                }
                            });
                        }, delay);
                    }));
                }
                
                Promise.all(promises).then(() => {
                    resolve(`成功播放音效`);
                });
            }
        } else {
            // 混搭播放：多个不同音效
            let promises = [];
            let playSequence = [];
            
            // 生成播放序列
            for (let i = 0; i < playCount; i++) {
                for (const id of sfxIds) {
                    playSequence.push(id);
                }
            }
            
            // 执行混搭播放
            playSequence.forEach((id, index) => {
                const delay = index * 300; // 混搭播放间隔稍长一点
                const sfxPath = path.join(__dirname, 'SFX', `${id}.wav`);
                
                promises.push(new Promise((resolveOne) => {
                    setTimeout(() => {
                        const ffplayCommand = `ffplay -nodisp -autoexit -af "atempo=1.5" "${sfxPath}"`;
                        const normalCommand = `powershell -c "(New-Object Media.SoundPlayer '${sfxPath}').Play()"`;
                        
                        exec(ffplayCommand, { timeout: 3000 }, (error) => {
                            if (error) {
                                exec(normalCommand, (error2) => {
                                    resolveOne();
                                });
                            } else {
                                resolveOne();
                            }
                        });
                    }, delay);
                }));
            });
            
            Promise.all(promises).then(() => {
                const descriptions = sfxIds.map(id => SFX_LIBRARY[id]).join(' + ');
                resolve(`成功播放音效`);
            });
        }
    });
}

// 导出必要函数
module.exports = {
    getToolDefinitions: () => [SFX_TOOL],
    executeFunction: async (name, parameters) => {
        if (name !== "play_sound_effect") {
            throw new Error(`不支持的功能: ${name}`);
        }
        return await executePlaySfx(parameters);
    }
};