/**
 * 键盘按键工具函数
 */
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// Python脚本模板
const PYTHON_SCRIPT_TEMPLATE = `# -*- coding: utf-8 -*-
import sys
import json

try:
    import pyautogui
except ImportError as e:
    print(json.dumps({"error": f"缺少必需的Python包: {str(e)}. 请在my-neuro环境中安装: pip install pyautogui"}))
    sys.exit(1)

def press_key(key):
    try:
        # 按下指定的键
        pyautogui.press(key)
        return f"成功按下 {key} 键"
    except Exception as e:
        return f"按键失败: {str(e)}"

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(json.dumps({"error": "需要提供按键参数"}))
        sys.exit(1)

    key = sys.argv[1]
    result = press_key(key)
    print(json.dumps({"result": result}, ensure_ascii=False))
`;

/**
 * 模拟键盘按键操作
 * @param {string} key - 要按下的键：'enter'(回车)、'left'(左方向键)、'right'(右方向键)
 */
async function pressKey({key}) {
    if (!key) {
        throw new Error('缺少按键参数');
    }

    // 验证支持的按键
    const supportedKeys = ['enter', 'left', 'right'];
    if (!supportedKeys.includes(key.toLowerCase())) {
        throw new Error(`不支持的按键: ${key}. 支持的按键: ${supportedKeys.join(', ')}`);
    }

    return new Promise((resolve, reject) => {
        // 创建临时Python脚本文件
        const tempScriptPath = path.join(__dirname, 'temp_keyboard.py');

        try {
            // 写入Python脚本
            fs.writeFileSync(tempScriptPath, PYTHON_SCRIPT_TEMPLATE);

            // 执行Python脚本 - 支持conda环境
            const isWindows = process.platform === 'win32';
            let command;

            if (isWindows) {
                command = `call conda activate my-neuro && python "${tempScriptPath}" "${key.toLowerCase()}"`;
            } else {
                command = `source activate my-neuro && python "${tempScriptPath}" "${key.toLowerCase()}"`;
            }

            const execOptions = {
                timeout: 10000,
                shell: isWindows ? 'cmd.exe' : '/bin/bash',
                env: { ...process.env, CONDA_DLL_SEARCH_MODIFICATION_ENABLE: '1' }
            };

            exec(command, execOptions, (error, stdout, stderr) => {
                // 清理临时文件
                try {
                    fs.unlinkSync(tempScriptPath);
                } catch (cleanupError) {
                    console.warn('清理临时文件失败:', cleanupError.message);
                }

                if (error) {
                    reject(new Error(`执行失败: ${error.message}`));
                    return;
                }

                if (stderr) {
                    console.warn('Python警告:', stderr);
                }

                try {
                    const result = JSON.parse(stdout);
                    if (result.error) {
                        reject(new Error(result.error));
                    } else {
                        resolve(result.result);
                    }
                } catch (parseError) {
                    // 如果JSON解析失败，返回原始输出
                    resolve(stdout || '按键操作完成');
                }
            });

        } catch (writeError) {
            reject(new Error(`创建脚本失败: ${writeError.message}`));
        }
    });
}

// Function Call兼容接口
function getToolDefinitions() {
    return [
        {
            name: "press_key",
            description: "模拟键盘按键操作，支持回车键和方向键",
            parameters: {
                type: "object",
                properties: {
                    key: {
                        type: "string",
                        description: "要按下的键：'enter'(回车键)、'left'(左方向键)、'right'(右方向键)"
                    }
                },
                required: ["key"]
            }
        }
    ];
}

// Function Call兼容接口 - 执行函数
async function executeFunction(name, parameters) {
    switch (name) {
        case 'press_key':
            return await pressKey(parameters);
        default:
            throw new Error(`不支持的函数: ${name}`);
    }
}

module.exports = {
    pressKey,
    getToolDefinitions,
    executeFunction
};